# BUILD FILE SYNTAX: PYTHON_DSL
load("//buck_imports:profilo_path.bzl", "profilo_path")
load("//build_defs:fb_xplat_cxx_library.bzl", "fb_xplat_cxx_library")

def museum_tracer_library(version):
    version_ = version.replace(".", "_")
    version_num = version.replace(".", "")

    exported_headers = [
        "ArtTracer.h",
    ]
    fb_xplat_cxx_library(
        name = "museum-tracer-{version}".format(version = version),
        srcs = [
            "ArtTracer.cpp",
        ],
        compiler_flags = [
            "-fvisibility=hidden",
            "-fexceptions",
            "-std=gnu++14",
            "-DLOG_TAG=\"Profilo/ArtCompat\"",
            "-UMUSEUM_VERSION",
            "-DMUSEUM_VERSION=v{}_readonly".format(version_),
            #'-DFBLOG_NDEBUG=0', # extra logging
        ],
        exported_headers = {
            header.replace(".h", "_" + version_num + ".h"): header
            for header in exported_headers
        },
        exported_preprocessor_flags = [
            "-DMUSEUM_VERSION_{}".format(version_),
        ],
        allow_jni_merging = False,
        force_static = True,
        header_namespace = "profiler",
        headers = glob(
            ["*.h"],
            exclude = exported_headers,
        ),
        reexport_all_header_dependencies = False,
        soname = "libprofiloprofiler{version_num}.$(ext)".format(version_num = version_num),
        visibility = [
            profilo_path("..."),
        ],
        deps = [
            profilo_path("deps/fb:fb"),
            profilo_path("deps/fbjni:fbjni"),
            profilo_path("deps/forkjail:forkjail"),
            profilo_path("cpp/museum-readonly/{version}/art/runtime:runtime".format(version = version)),
            profilo_path("cpp/logger:logger"),
        ],
    )

museum_tracer_library(version = "5.1.1")

museum_tracer_library(version = "6.0.1")

museum_tracer_library(version = "7.0.0")

def unwindc_tracer_library(version):
    version_num = version.replace(".", "")
    android_version = "android_{}".format(version_num)

    fb_xplat_cxx_library(
        name = "unwindc-tracer-{}".format(version),
        srcs = [
            "ArtUnwindcTracer.cpp",
        ],
        compiler_flags = [
            "-fvisibility=hidden",
            "-fexceptions",
            "-std=gnu++14",
            '-DLOG_TAG="Profilo/Unwindc"',
            "-O3",
            "-Wno-self-assign",
            "-Wno-parentheses-equality",
            "-Wno-unused-variable",
        ],
        exported_preprocessor_flags = [
            "-DANDROID_VERSION_{}".format(version_num),
        ],
        force_static = True,
        header_namespace = "profiler",
        headers = [
            "ArtUnwindcTracer.h",
            "BaseTracer.h",
            "unwindc/runtime.h",
        ],
        exported_headers = {
            "ArtUnwindcTracer_{}.h".format(version_num):
                "ArtUnwindcTracer.h",
        },
        platform_headers = [
            (".*x86", {
                "unwindc/unwinder.h":
                "unwindc/{}/x86/unwinder.h".format(android_version),
            }),
            (".*armv7", {
                "unwindc/unwinder.h":
                "unwindc/{}/arm/unwinder.h".format(android_version),
            }),
        ],
        soname = "libprofiloprofilerunwindc{version_num}.$(ext)".format(version_num=version_num),
        visibility = [
            profilo_path("..."),
        ],
        deps = [
            profilo_path("deps/fb:fb"),
            profilo_path("cpp/logger:logger"),
        ],
    )

unwindc_tracer_library("6.0.0")

PROFILER_EXPORTED_HEADERS = [
    "DalvikTracer.h",
    "SamplingProfiler.h",
]

fb_xplat_cxx_library(
    name = "constants",
    header_namespace = "profiler",
    exported_headers = [
        "Constants.h",
    ],
    visibility = [
        profilo_path("cpp/writer/..."),
    ],
)

fb_xplat_cxx_library(
    name = "artcompat",
    srcs = [
        "ArtCompatibility.cpp",
        "ArtCompatibilityRunner.cpp",
    ],
    headers = [
        "ArtCompatibility.h",
        "ArtCompatibilityRunner.h",
    ],
    header_namespace = "profiler",
    exported_headers = [
        "ArtCompatibility.h",
    ],
    allow_jni_merging = True,
    compiler_flags = [
        "-fvisibility=hidden",
        "-fexceptions",
        "-std=gnu++14",
        "-DLOG_TAG=\"Profilo/ArtCompatibility\"",
        #"-DFBLOG_NDEBUG=0",  # verbose logging
    ],
    force_static = True,
    soname = "libprofilo_stacktrace_artcompat.so",
    deps = [
        ":base_tracer",
        ":museum-tracer-5.1.1",
        ":museum-tracer-6.0.1",
        ":museum-tracer-7.0.0",
        ":unwindc-tracer-6.0.0",
        profilo_path("deps/fb:fb"),
        profilo_path("deps/fbjni:fbjni"),
        profilo_path("deps/forkjail:forkjail"),
        profilo_path("cpp/logger:logger"),
    ],
)

fb_xplat_cxx_library(
    name = "base_tracer",
    header_namespace = "profiler",
    exported_headers = [
        "BaseTracer.h",
    ],
    visibility = [
        profilo_path("..."),
    ],
)

fb_xplat_cxx_library(
    name = "profiler",
    srcs = [
        "DalvikTracer.cpp",
        "SamplingProfiler.cpp",
        "jni.cpp",
    ],
    headers = glob(
        ["*.h"],
        exclude = PROFILER_EXPORTED_HEADERS,
    ),
    header_namespace = "profiler",
    exported_headers = PROFILER_EXPORTED_HEADERS,
    allow_jni_merging = True,
    compiler_flags = [
        "-fvisibility=hidden",
        "-fexceptions",
        "-DLOG_TAG=\"Profilo/Profiler\"",
        "-Wno-format-security",
        "-Wno-unknown-attributes",
        #'-DFBLOG_NDEBUG=0', # verbose logging
        "-std=gnu++14",
    ],
    soname = "libprofilo_stacktrace.$(ext)",
    supported_platforms_regex = "^android-(armv7|x86)$",
    visibility = [
        profilo_path("java/main/com/facebook/profilo/provider/stacktrace:"),
    ],
    deps = [
        ":artcompat",
        ":base_tracer",
        ":constants",
        ":museum-tracer-5.1.1",
        ":museum-tracer-6.0.1",
        ":museum-tracer-7.0.0",
        ":unwindc-tracer-6.0.0",
        profilo_path("cpp:constants"),
        profilo_path("cpp:profilo"),
        profilo_path("cpp:providers"),
        profilo_path("cpp/logger:logger"),
        profilo_path("cpp/util:util"),
        profilo_path("deps/dalvik:dalvik-subset"),
        profilo_path("deps/fb:fb"),
        profilo_path("deps/fbjni:fbjni"),
        profilo_path("deps/museum:museum"),
        profilo_path("deps/sigmux:sigmux"),
    ],
)
